/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/

#ifndef PLUGINPROCESSOR_H_INCLUDED
#define PLUGINPROCESSOR_H_INCLUDED

#include <sstream>                              // (for debug with printParams())
#include "../JuceLibraryCode/JuceHeader.h"


//==============================================================================
/**
    SimplePlugin
    ------------
    
    ###Â Bare bones audio plugin with default generic GUI using JUCE.
    
    - Need specify parameters only in processor constructor.
    - Automatically handles GUI sliders and creates a simple generic editor.
    
    To implement our parameters are created on the heap rather than the stack.
    We keep a view container 'params' for easy access (and to remove the need to
    dynamic_cast), before adding the parameters to the plugin using 
    addParameter() as usual.
    
    Our generic GUI editor accesses the params through public getParam() function 
    and should change a parameter value only through the public writeParam().

*/
class SimplePluginAudioProcessor  : public AudioProcessor
{
public:
    //==============================================================================
    SimplePluginAudioProcessor();
    ~SimplePluginAudioProcessor();

    //==============================================================================
    void prepareToPlay (double sampleRate, int samplesPerBlock) override;
    void releaseResources() override;

    void processBlock (AudioSampleBuffer&, MidiBuffer&) override;

    //==============================================================================
    AudioProcessorEditor* createEditor() override;
    bool hasEditor() const override                   { return true; }

    //==============================================================================
    const String getName() const override             { return JucePlugin_Name; }

    bool acceptsMidi() const override;
    bool producesMidi() const override;
    double getTailLengthSeconds() const override      { return 0.0; }

    //==============================================================================
    int getNumPrograms() override                            { return 1; }
    int getCurrentProgram() override                         { return 0; }
    void setCurrentProgram (int /*index*/) override          { }
    const String getProgramName (int /*index*/) override     { return String(); }
    void changeProgramName (int /*index*/, const String& /*newName*/) override { }

    //==============================================================================
    void getStateInformation (MemoryBlock& destData) override;
    void setStateInformation (const void* data, int sizeInBytes) override;
    
    //==============================================================================
    int numParams() const { return static_cast<int> (params.size()); }  // cast size_t

    const AudioParameterFloat& getParam (int index) const;
    void setParam (int index, float newValue);

private:
    enum ParameterNames                         // List symbolic names here
    {                                           // (For params indices in
        gain,                                   // processBlock())
        saturate,
        trim
    };

    std::vector<AudioParameterFloat*> params;   // This is a view on our parameters
                                                // (as subclass AudioParameterFloat)
                                                // to ease parameter management.
                                                // (Remember JUCE's AudioProcessor
                                                // OwnedArray<AudioProcessorParameter>
                                                // owns the parameters not this
                                                // container)

    void writeParamsToXml (XmlElement& xml);        // (Use XML of parameters state
    void setParamsFromXml (const XmlElement& xml);  // for host/plugin communications)

    //==============================================================================
    JUCE_DECLARE_NON_COPYABLE_WITH_LEAK_DETECTOR (SimplePluginAudioProcessor)
};


namespace NonMember {                           // Some helper functions that don't
                                                // need to be inside the processor
template <typename Element>
bool indexInVector (int index, const std::vector<Element>& container);

void printParams(const SimplePluginAudioProcessor& processor); // for debugging

} // namespace NonMember


#endif  // PLUGINPROCESSOR_H_INCLUDED
